import { Enum } from "typescript-string-enums";
import { EmbeddedAttachment } from "./EmbeddedAttachment";
import {
  SavePIIdentityFromUI,
  SavePIPhoneFromUI,
  SavePersonalDataItemEvent,
  SavePIAddressFromUI,
  SavePIIdentityFromCapture,
  SavePIAddressFromCapture,
  SavePIPhoneFromCapture,
} from "../../Save/Interface";
export enum Country {
  NO_TYPE = "NO_TYPE",
  UNIVERSAL = "UNIVERSAL",
  AD = "AD",
  AE = "AE",
  AF = "AF",
  AG = "AG",
  AI = "AI",
  AL = "AL",
  AM = "AM",
  AO = "AO",
  AR = "AR",
  AS = "AS",
  AT = "AT",
  AU = "AU",
  AW = "AW",
  AZ = "AZ",
  BA = "BA",
  BB = "BB",
  BD = "BD",
  BE = "BE",
  BF = "BF",
  BG = "BG",
  BH = "BH",
  BI = "BI",
  BJ = "BJ",
  BL = "BL",
  BM = "BM",
  BN = "BN",
  BO = "BO",
  BR = "BR",
  BS = "BS",
  BT = "BT",
  BW = "BW",
  BY = "BY",
  BZ = "BZ",
  CA = "CA",
  CD = "CD",
  CF = "CF",
  CG = "CG",
  CH = "CH",
  CI = "CI",
  CK = "CK",
  CL = "CL",
  CM = "CM",
  CN = "CN",
  CO = "CO",
  CR = "CR",
  CU = "CU",
  CV = "CV",
  CY = "CY",
  CZ = "CZ",
  DE = "DE",
  DJ = "DJ",
  DK = "DK",
  DM = "DM",
  DO = "DO",
  DZ = "DZ",
  EC = "EC",
  EE = "EE",
  EG = "EG",
  ER = "ER",
  ES = "ES",
  ET = "ET",
  FI = "FI",
  FJ = "FJ",
  FK = "FK",
  FM = "FM",
  FO = "FO",
  FR = "FR",
  GA = "GA",
  GB = "GB",
  GD = "GD",
  GE = "GE",
  GF = "GF",
  GG = "GG",
  GH = "GH",
  GI = "GI",
  GL = "GL",
  GM = "GM",
  GN = "GN",
  GP = "GP",
  GQ = "GQ",
  GR = "GR",
  GT = "GT",
  GU = "GU",
  GW = "GW",
  GY = "GY",
  HK = "HK",
  HN = "HN",
  HR = "HR",
  HT = "HT",
  HU = "HU",
  ID = "ID",
  IE = "IE",
  IL = "IL",
  IM = "IM",
  IN = "IN",
  IO = "IO",
  IQ = "IQ",
  IR = "IR",
  IS = "IS",
  IT = "IT",
  JE = "JE",
  JM = "JM",
  JO = "JO",
  JP = "JP",
  KE = "KE",
  KG = "KG",
  KH = "KH",
  KI = "KI",
  KM = "KM",
  KN = "KN",
  KP = "KP",
  KR = "KR",
  KW = "KW",
  KY = "KY",
  KZ = "KZ",
  LA = "LA",
  LB = "LB",
  LC = "LC",
  LI = "LI",
  LK = "LK",
  LR = "LR",
  LS = "LS",
  LT = "LT",
  LU = "LU",
  LV = "LV",
  LY = "LY",
  MA = "MA",
  MC = "MC",
  MD = "MD",
  ME = "ME",
  MF = "MF",
  MG = "MG",
  MH = "MH",
  MK = "MK",
  ML = "ML",
  MM = "MM",
  MN = "MN",
  MO = "MO",
  MP = "MP",
  MQ = "MQ",
  MR = "MR",
  MS = "MS",
  MT = "MT",
  MU = "MU",
  MV = "MV",
  MW = "MW",
  MX = "MX",
  MY = "MY",
  MZ = "MZ",
  NA = "NA",
  NC = "NC",
  NE = "NE",
  NF = "NF",
  NG = "NG",
  NI = "NI",
  NL = "NL",
  NO = "NO",
  NP = "NP",
  NR = "NR",
  NU = "NU",
  NZ = "NZ",
  OM = "OM",
  PA = "PA",
  PE = "PE",
  PF = "PF",
  PG = "PG",
  PH = "PH",
  PK = "PK",
  PL = "PL",
  PM = "PM",
  PR = "PR",
  PS = "PS",
  PT = "PT",
  PW = "PW",
  PY = "PY",
  QA = "QA",
  RE = "RE",
  RO = "RO",
  RS = "RS",
  RU = "RU",
  RW = "RW",
  SA = "SA",
  SB = "SB",
  SC = "SC",
  SD = "SD",
  SE = "SE",
  SG = "SG",
  SH = "SH",
  SI = "SI",
  SK = "SK",
  SL = "SL",
  SM = "SM",
  SN = "SN",
  SO = "SO",
  SR = "SR",
  ST = "ST",
  SV = "SV",
  SY = "SY",
  SZ = "SZ",
  TC = "TC",
  TD = "TD",
  TF = "TF",
  TG = "TG",
  TH = "TH",
  TJ = "TJ",
  TK = "TK",
  TL = "TL",
  TM = "TM",
  TN = "TN",
  TO = "TO",
  TR = "TR",
  TT = "TT",
  TV = "TV",
  TW = "TW",
  TZ = "TZ",
  UA = "UA",
  UG = "UG",
  US = "US",
  UY = "UY",
  UZ = "UZ",
  VA = "VA",
  VC = "VC",
  VE = "VE",
  VG = "VG",
  VI = "VI",
  VN = "VN",
  VU = "VU",
  WF = "WF",
  WS = "WS",
  XK = "XK",
  YE = "YE",
  YT = "YT",
  ZA = "ZA",
  ZM = "ZM",
  ZW = "ZW",
  AQ = "AQ",
  AX = "AX",
  BV = "BV",
  CC = "CC",
  CX = "CX",
  EH = "EH",
  GS = "GS",
  HM = "HM",
  PN = "PN",
  SJ = "SJ",
  UM = "UM",
}
export function getLocalFormat(obj: DataModelObject): Country {
  return obj.LocaleFormat;
}
export const DataModelType = Enum(
  "KWAddress",
  "KWAuthentifiant",
  "KWBankStatement",
  "KWCollection",
  "KWCompany",
  "KWDataChangeHistory",
  "KWDriverLicence",
  "KWEmail",
  "KWFiscalStatement",
  "KWGeneratedPassword",
  "KWIDCard",
  "KWIdentity",
  "KWMerchand",
  "KWMiscData",
  "KWPasskey",
  "KWPassport",
  "KWPaymentMean_creditCard",
  "KWPaymentMean_paypal",
  "KWPersonalWebsite",
  "KWPhone",
  "KWPurchaseAccount",
  "KWPurchaseCategory",
  "KWPurchasePaidBasket",
  "KWPurchaseTrueArticle",
  "KWSecret",
  "KWSecureFileInfo",
  "KWSecureNote",
  "KWSecurityBreach",
  "KWSettingsManagerApp",
  "KWSocialSecurityStatement",
  "KWWebSite"
);
export type DataModelType = Enum<typeof DataModelType>;
export const TransactionType = Enum(
  "ADDRESS",
  "AUTHENTIFIANT",
  "BANKACCESS",
  "BANKACCOUNT",
  "BANKCATEGORY",
  "BANKINSTITUTION",
  "BANKSITE",
  "BANKSTATEMENT",
  "BANKTRANSACTION",
  "COLLECTION",
  "COMPANY",
  "DATA_CHANGE_HISTORY",
  "DATA_USAGE_HISTORY",
  "DEFAULT_AUTHENTIFIANT",
  "DEFAULT_CONFIDENTIAL",
  "DEFAULT_IDENTITY",
  "DEFAULT_MISC",
  "DEFAULT_PAYMENTMEANS",
  "DEFAULT_REWARDCARD",
  "DRIVERLICENCE",
  "EMAIL",
  "EMERGENCY_BUNDLE_FULL",
  "EMERGENCY_BUNDLE_LITE",
  "FULLBACKUP",
  "FISCALSTATEMENT",
  "GENERATED_PASSWORD",
  "IDCARD",
  "IDENTITY",
  "INVOICEACCESS",
  "INVOICEELEMENT",
  "INVOICEINSTITUTION",
  "MERCHANT",
  "MISCDATA",
  "PASSKEY",
  "PASSPORT",
  "PAYMENTMEANS_CREDITCARD",
  "PAYMENTMEAN_PAYPAL",
  "PERSONALWEBSITE",
  "PHONE",
  "POINTS",
  "PURCHASEABANDONNEDBASKET",
  "PURCHASEACCOUNT",
  "PURCHASEARTICLE",
  "PURCHASEBASKET",
  "PURCHASEDELIVERYARTICLE",
  "PURCHASEOPTIONARTICLE",
  "PURCHASEPAIDBASKET",
  "PURCHASE_CATEGORY",
  "REWARDCARD",
  "SECRET",
  "SECUREFILEINFO",
  "SECURENOTE",
  "SECURITYALERT",
  "SECURITYALERTS",
  "SECURITYBREACH",
  "SETTINGS",
  "SHARING_GROUP",
  "SOCIALSECURITYSTATEMENT",
  "WEBSITE"
);
export type TransactionType = Enum<typeof TransactionType>;
export const DATAMODEL_TYPE_TO_TRANSACTION_TYPE: {
  [k in DataModelType]: TransactionType;
} = {
  KWAddress: TransactionType.ADDRESS,
  KWAuthentifiant: TransactionType.AUTHENTIFIANT,
  KWCollection: TransactionType.COLLECTION,
  KWBankStatement: TransactionType.BANKSTATEMENT,
  KWCompany: TransactionType.COMPANY,
  KWDataChangeHistory: TransactionType.DATA_CHANGE_HISTORY,
  KWDriverLicence: TransactionType.DRIVERLICENCE,
  KWEmail: TransactionType.EMAIL,
  KWFiscalStatement: TransactionType.FISCALSTATEMENT,
  KWGeneratedPassword: TransactionType.GENERATED_PASSWORD,
  KWIDCard: TransactionType.IDCARD,
  KWIdentity: TransactionType.IDENTITY,
  KWMerchand: TransactionType.MERCHANT,
  KWMiscData: TransactionType.MISCDATA,
  KWPasskey: TransactionType.PASSKEY,
  KWPassport: TransactionType.PASSPORT,
  KWPaymentMean_creditCard: TransactionType.PAYMENTMEANS_CREDITCARD,
  KWPaymentMean_paypal: TransactionType.PAYMENTMEAN_PAYPAL,
  KWPersonalWebsite: TransactionType.PERSONALWEBSITE,
  KWPhone: TransactionType.PHONE,
  KWPurchaseAccount: TransactionType.PURCHASEACCOUNT,
  KWPurchaseCategory: TransactionType.PURCHASE_CATEGORY,
  KWPurchasePaidBasket: TransactionType.PURCHASEPAIDBASKET,
  KWPurchaseTrueArticle: TransactionType.PURCHASEARTICLE,
  KWSecret: TransactionType.SECRET,
  KWSecureFileInfo: TransactionType.SECUREFILEINFO,
  KWSecureNote: TransactionType.SECURENOTE,
  KWSecurityBreach: TransactionType.SECURITYBREACH,
  KWSettingsManagerApp: TransactionType.SETTINGS,
  KWSocialSecurityStatement: TransactionType.SOCIALSECURITYSTATEMENT,
  KWWebSite: TransactionType.WEBSITE,
};
export const TRANSACTION_TYPE_TO_DATAMODEL_TYPE = Object.values(
  DataModelType
).reduce(
  (typeMap, kwType) => {
    const transactionType = DATAMODEL_TYPE_TO_TRANSACTION_TYPE[kwType];
    typeMap[transactionType] = kwType;
    return typeMap;
  },
  {} as {
    [key in TransactionType]?: DataModelType;
  }
);
export function getDataModelTypeFromTransactionType(
  t: TransactionType
): DataModelType {
  const dataModelType = TRANSACTION_TYPE_TO_DATAMODEL_TYPE[t];
  if (!dataModelType) {
    throw new Error(`No DataModelType found for TransactionType '${t}'`);
  }
  return dataModelType;
}
export function getTransactionTypeFromDataModelType(
  t: DataModelType
): TransactionType {
  if (!DATAMODEL_TYPE_TO_TRANSACTION_TYPE[t]) {
    throw new Error(`No TransactionType found for DataModelType ${t}`);
  }
  return DATAMODEL_TYPE_TO_TRANSACTION_TYPE[t];
}
export const transactionTypes = Enum.keys(TransactionType);
export const dataModelTypes = Enum.keys(DataModelType);
export interface BaseDataModelObject {
  kwType: DataModelType;
  Id: string;
  LastBackupTime: number;
}
export interface DataModelObject extends BaseDataModelObject {
  LocaleFormat: Country;
  SpaceId: string;
  CreationDatetime?: number;
  UserModificationDatetime?: number;
  LastUse?: number;
  Attachments?: EmbeddedAttachment[];
}
export const isDataModelObject = (
  x: BaseDataModelObject & Partial<DataModelObject>
): x is DataModelObject => {
  return !!x.LocaleFormat && typeof x.SpaceId === "string";
};
export type Localized =
  | SavePIIdentityFromUI
  | SavePIIdentityFromCapture
  | SavePIPhoneFromUI
  | SavePIPhoneFromCapture
  | SavePIAddressFromUI
  | SavePIAddressFromCapture;
export function isObjectLocalized(
  o: SavePersonalDataItemEvent
): o is Localized {
  return (
    Boolean(o) &&
    (o.kwType === "KWPhone" ||
      o.kwType === "KWIdentity" ||
      o.kwType === "KWAddress" ||
      o.kwType === "KWBankStatement")
  );
}
